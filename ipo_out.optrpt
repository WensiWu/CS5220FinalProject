
Begin optimization report for: main(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pardiso_sky3.c(582,5) inlined into pardiso_sky3.c(155,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(582,5) inlined into pardiso_sky3.c(155,14)
      remark #15389: vectorization support: reference pminc has unaligned access   [ pardiso_sky3.c(583,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(582,5) inlined into pardiso_sky3.c(155,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(585,5) inlined into pardiso_sky3.c(155,14)
   remark #15382: vectorization support: call to function fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(586,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(589,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 586 and  line 589
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 589 and  line 586
LOOP END

LOOP BEGIN at pardiso_sky3.c(594,5) inlined into pardiso_sky3.c(155,14)
<Peeled>
LOOP END

LOOP BEGIN at pardiso_sky3.c(594,5) inlined into pardiso_sky3.c(155,14)
   remark #15388: vectorization support: reference pjcode has aligned access   [ pardiso_sky3.c(595,11) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.830 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pardiso_sky3.c(594,5) inlined into pardiso_sky3.c(155,14)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at pardiso_sky3.c(594,5) inlined into pardiso_sky3.c(155,14)
<Remainder>
LOOP END

LOOP BEGIN at pardiso_sky3.c(598,5) inlined into pardiso_sky3.c(155,14)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at pardiso_sky3.c(637,5) inlined into pardiso_sky3.c(178,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between pjcode line 641 and pjcode line 641
   remark #15346: vector dependence: assumed OUTPUT dependence between pjcode line 641 and pjcode line 641

   LOOP BEGIN at pardiso_sky3.c(638,9) inlined into pardiso_sky3.c(178,5)
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(649,5) inlined into pardiso_sky3.c(178,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between pmcode line 654 and pmcode line 655
   remark #15346: vector dependence: assumed OUTPUT dependence between pmcode line 655 and pmcode line 654

   LOOP BEGIN at pardiso_sky3.c(653,9) inlined into pardiso_sky3.c(178,5)
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(649,5) inlined into pardiso_sky3.c(178,5)
<Remainder>
LOOP END

LOOP BEGIN at pardiso_sky3.c(751,5) inlined into pardiso_sky3.c(190,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(751,5) inlined into pardiso_sky3.c(190,5)
      remark #15388: vectorization support: reference SI32 has aligned access   [ pardiso_sky3.c(752,11) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 5.330 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(751,5) inlined into pardiso_sky3.c(190,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(759,5) inlined into pardiso_sky3.c(190,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between SI32 line 775 and SI32 line 775
   remark #15346: vector dependence: assumed OUTPUT dependence between SI32 line 775 and SI32 line 775

   LOOP BEGIN at pardiso_sky3.c(761,9) inlined into pardiso_sky3.c(190,5)
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(767,9) inlined into pardiso_sky3.c(190,5)
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(785,5) inlined into pardiso_sky3.c(190,5)
<Peeled, Distributed chunk1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(785,5) inlined into pardiso_sky3.c(190,5)
   <Peeled, Distributed chunk1>
      remark #15388: vectorization support: reference SI32 has aligned access   [ pardiso_sky3.c(788,11) ]
      remark #15388: vectorization support: reference .2.30_2temp_array.241.var has aligned access   [ <compiler generated> ]
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 8 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(785,5) inlined into pardiso_sky3.c(190,5)
   <Peeled, Remainder, Distributed chunk1>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(785,5) inlined into pardiso_sky3.c(190,5)
   <Peeled, Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between SI32 line 0 and SI32 line 0
      remark #15346: vector dependence: assumed ANTI dependence between SI32 line 0 and SI32 line 0
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(232,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pardiso_sky3.c(238,5)
<Peeled>
LOOP END

LOOP BEGIN at pardiso_sky3.c(238,5)
   remark #15388: vectorization support: reference iparm has aligned access
   remark #15389: vectorization support: reference .L_2__cnst_pck.0.var has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: BLOCK WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 2.420 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pardiso_sky3.c(264,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pardiso_sky3.c(719,5) inlined into pardiso_sky3.c(276,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(719,5) inlined into pardiso_sky3.c(276,14)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(720,9) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 3.330 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(719,5) inlined into pardiso_sky3.c(276,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(725,9) inlined into pardiso_sky3.c(276,14)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pardiso_sky3.c(305,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(306,9) ]
LOOP END

LOOP BEGIN at pardiso_sky3.c(310,5)
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(311,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(312,9) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.290 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pardiso_sky3.c(310,5)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(311,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(312,9) ]
LOOP END

LOOP BEGIN at pardiso_sky3.c(316,5)
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(317,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(317,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(318,9) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.290 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pardiso_sky3.c(316,5)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(317,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(317,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(318,9) ]
LOOP END

LOOP BEGIN at pardiso_sky3.c(326,9)
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(328,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(328,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(327,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(327,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(329,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 2.490 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pardiso_sky3.c(326,9)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(328,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(328,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(327,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(327,13) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(329,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at pardiso_sky3.c(326,9)
<Remainder>
LOOP END

LOOP BEGIN at pardiso_sky3.c(371,6)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(342,13)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.350 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(342,13)
   <Remainder>
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(343,17) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1176,2) inlined into pardiso_sky3.c(357,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between SI32 line 1182 and SI32 line 1182
      remark #15346: vector dependence: assumed OUTPUT dependence between SI32 line 1182 and SI32 line 1182

      LOOP BEGIN at pardiso_sky3.c(1179,3) inlined into pardiso_sky3.c(357,6)
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1182,5) ]
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1182,5) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15399: vectorization support: unroll factor set to 4
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 36 
         remark #15477: vector loop cost: 42.000 
         remark #15478: estimated potential speedup: 0.850 
         remark #15479: lightweight vector operations: 14 
         remark #15480: medium-overhead vector operations: 2 
         remark #15481: heavy-overhead vector operations: 2 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(1179,3) inlined into pardiso_sky3.c(357,6)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1195,2) inlined into pardiso_sky3.c(357,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ia line 1196 and ia line 1196
      remark #15346: vector dependence: assumed ANTI dependence between ia line 1196 and ia line 1196
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1195,2) inlined into pardiso_sky3.c(357,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1201,2) inlined into pardiso_sky3.c(357,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between SI32 line 1208 and SI32 line 1212
      remark #15346: vector dependence: assumed FLOW dependence between SI32 line 1212 and SI32 line 1208

      LOOP BEGIN at pardiso_sky3.c(1204,3) inlined into pardiso_sky3.c(357,6)
         remark #15389: vectorization support: reference ia has unaligned access   [ pardiso_sky3.c(1208,7) ]
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1208,7) ]
         remark #15389: vectorization support: reference ia has unaligned access   [ pardiso_sky3.c(1210,7) ]
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1210,7) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ pardiso_sky3.c(1210,7) ]
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1212,5) ]
         remark #15389: vectorization support: reference SI32 has unaligned access   [ pardiso_sky3.c(1212,5) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 70 
         remark #15477: vector loop cost: 175.000 
         remark #15478: estimated potential speedup: 0.390 
         remark #15479: lightweight vector operations: 27 
         remark #15480: medium-overhead vector operations: 5 
         remark #15481: heavy-overhead vector operations: 4 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(1204,3) inlined into pardiso_sky3.c(357,6)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1149,5) inlined into pardiso_sky3.c(366,6)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(1150,13) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1162,5) inlined into pardiso_sky3.c(367,6)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(1163,13) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1162,5) inlined into pardiso_sky3.c(368,6)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(1163,13) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1149,5) inlined into pardiso_sky3.c(370,6)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(1150,13) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1162,5) inlined into pardiso_sky3.c(371,6)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(1163,13) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(391,4)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(486,13)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(488,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(488,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(489,17) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 5.500 
      remark #15478: estimated potential speedup: 2.490 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(486,13)
   <Remainder>
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(488,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(488,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(487,17) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(489,17) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(486,13)
   <Remainder>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1117,5) inlined into pardiso_sky3.c(493,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between px line 1121 and px line 1121
      remark #15346: vector dependence: assumed ANTI dependence between px line 1121 and px line 1121

      LOOP BEGIN at pardiso_sky3.c(1118,9) inlined into pardiso_sky3.c(493,13)
      LOOP END
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1117,5) inlined into pardiso_sky3.c(493,13)
   <Remainder>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1127,5) inlined into pardiso_sky3.c(493,13)
      remark #15389: vectorization support: reference pminc has unaligned access   [ pardiso_sky3.c(1128,9) ]
      remark #15389: vectorization support: reference pminc has unaligned access   [ pardiso_sky3.c(1129,9) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1133,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1134,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1134,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1134,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1135,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1135,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1136,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1136,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1137,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1137,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 5 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15458: masked indexed (or gather) loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 224 
      remark #15477: vector loop cost: 107.500 
      remark #15478: estimated potential speedup: 2.080 
      remark #15479: lightweight vector operations: 65 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1127,5) inlined into pardiso_sky3.c(493,13)
   <Remainder>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(502,14)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.360 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(502,14)
   <Remainder>
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(503,15) ]
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1080,9) inlined into pardiso_sky3.c(508,13)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1081,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1081,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1081,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1081,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1082,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1082,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1082,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1082,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 38 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 3.410 
      remark #15479: lightweight vector operations: 21 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1080,9) inlined into pardiso_sky3.c(508,13)
   <Remainder>
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1095,9) inlined into pardiso_sky3.c(508,13)
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 15 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 3.180 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1095,9) inlined into pardiso_sky3.c(508,13)
   <Remainder>
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(1096,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(1095,9) inlined into pardiso_sky3.c(508,13)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(518,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(518,9)
   <Multiversioned v2>
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(519,13) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ pardiso_sky3.c(519,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(518,9)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(545,9)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(546,13) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at pardiso_sky3.c(551,20)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: forces(double *, double *, double *, double *, double *, double *, double *, double *, int *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at pardiso_sky3.c(888,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at pardiso_sky3.c(889,9)
      remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ pardiso_sky3.c(892,17) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stiff(double *, double *, double *, double *, double *, double *, double *, double *, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pardiso_sky3.c(834,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pardiso_sky3.c(834,5)
      remark #15389: vectorization support: reference pss has unaligned access   [ pardiso_sky3.c(835,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.810 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pardiso_sky3.c(834,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pardiso_sky3.c(838,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between G line 841 and G line 871
   remark #15346: vector dependence: assumed ANTI dependence between G line 871 and G line 841

   LOOP BEGIN at pardiso_sky3.c(853,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between pss line 869 and pss line 871
      remark #15346: vector dependence: assumed OUTPUT dependence between pss line 871 and pss line 869

      LOOP BEGIN at pardiso_sky3.c(857,17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between pss line 869 and pss line 871
         remark #15346: vector dependence: assumed OUTPUT dependence between pss line 871 and pss line 869
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(857,17)
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(857,17)
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(857,17)
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(857,17)
      LOOP END

      LOOP BEGIN at pardiso_sky3.c(857,17)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: prop(double *, double *, double *, double *, double *, double *, double *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pardiso_sky3.c(670,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between px line 671 and px line 673
   remark #15346: vector dependence: assumed OUTPUT dependence between px line 673 and px line 671
LOOP END

LOOP BEGIN at pardiso_sky3.c(670,5)
<Remainder>
LOOP END

LOOP BEGIN at pardiso_sky3.c(678,5)
   remark #15382: vectorization support: call to function fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(680,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(684,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 680 and  line 684
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 684 and  line 680
LOOP END

LOOP BEGIN at pardiso_sky3.c(691,5)
   remark #15382: vectorization support: call to function fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(702,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pardiso_sky3.c(705,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between pminc line 692 and mod line 702
   remark #15346: vector dependence: assumed FLOW dependence between mod line 702 and pminc line 692
LOOP END
===========================================================================
